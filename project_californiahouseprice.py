# -*- coding: utf-8 -*-
"""Project CaliforniaHousePrice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BVhFPOovydchV1r_xKOSU1k7UCXfMiJW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""Californial DataSet Load"""

housing = fetch_california_housing()
df = pd.DataFrame(housing.data, columns=housing.feature_names)
df['MedHouseVal'] = housing.target

"""Explore The DataSet"""

print(df.shape)
print(df.head())
print(df.describe())
print(df.info())

"""Visualize The Data"""

sns.histplot(df['MedHouseVal'], bins=50)
plt.title("Distribution of Median House Value")
plt.show()

sns.pairplot(df[['MedInc', 'HouseAge', 'AveRooms', 'AveOccup', 'MedHouseVal']])
plt.show()

corr = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

"""Data with 500k is capped at max districts(count) this will give the model less acurancy and will predict wrong data

"""

#cap handelling
#Remove rows where MedHouseVal == 5.0 if you're okay losing data (good for regression):
df = df[df['MedHouseVal'] < 5.0]

"""Split Features and Target"""

X = df.drop('MedHouseVal', axis=1)  # Features are all put in the x axis (all of them except the Target thats why axis-1)
y = df['MedHouseVal']               # Target is put in the Y axis

"""Train-Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

"""Feature Scaling (Standardization)"""

#To Avoid The model to get distracted with large Values
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""Train a linear regression Model"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train_scaled, y_train)

"""Predict & Evaluate"""

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

y_pred = model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R² Score:", r2)

"""Visualise actual vs Predicted

"""

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Median House Value")
plt.ylabel("Predicted Median House Value")
plt.title("Actual vs Predicted House Values")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Line y=x
plt.grid(True)
plt.show()

"""model nd scaler for streamlit"""

import joblib

# Save the trained model and the scaler
joblib.dump(model, "model.pkl")
joblib.dump(scaler, "scaler.pkl")

"""Creating Stremlit app"""

import streamlit as st
import numpy as np
import joblib

# Load the saved model and scaler
model = joblib.load("model.pkl")
scaler = joblib.load("scaler.pkl")

st.set_page_config(page_title="California House Price Predictor")
st.title("🏡 California House Price Predictor")

st.write("Enter the details below to predict the **median house value**.")

# Input fields
MedInc = st.number_input("Median Income (in 10k USD)", value=3.0)
HouseAge = st.number_input("House Age", value=20.0)
AveRooms = st.number_input("Average Rooms per Household", value=5.0)
AveBedrms = st.number_input("Average Bedrooms per Household", value=1.0)
Population = st.number_input("Population", value=1000.0)
AveOccup = st.number_input("Average Occupancy", value=3.0)
Latitude = st.number_input("Latitude", value=34.0)
Longitude = st.number_input("Longitude", value=-118.0)

if st.button("Predict"):
    features = np.array([[MedInc, HouseAge, AveRooms, AveBedrms,
                          Population, AveOccup, Latitude, Longitude]])

    features_scaled = scaler.transform(features)
    prediction = model.predict(features_scaled)[0]

    st.success(f"🏠 Predicted Median House Value: **${prediction * 100000:.2f}**")





"""Stream lit Rerun"""

code = '''
import streamlit as st
import numpy as np
import joblib

# Load the saved model and scaler
model = joblib.load("model.pkl")
scaler = joblib.load("scaler.pkl")

st.set_page_config(page_title="California House Price Predictor")
st.title("🏠 California House Price Predictor")

st.write("Enter the housing details below to predict the **Median House Value** in California:")

# Input fields
MedInc = st.number_input("Median Income (10k USD)", value=3.0)
HouseAge = st.number_input("House Age", value=20.0)
AveRooms = st.number_input("Average Rooms", value=5.0)
AveBedrms = st.number_input("Average Bedrooms", value=1.0)
Population = st.number_input("Population", value=1000.0)
AveOccup = st.number_input("Average Occupants", value=3.0)
Latitude = st.number_input("Latitude", value=34.0)
Longitude = st.number_input("Longitude", value=-118.0)

if st.button("Predict"):
    input_data = np.array([[MedInc, HouseAge, AveRooms, AveBedrms, Population, AveOccup, Latitude, Longitude]])
    scaled_input = scaler.transform(input_data)
    prediction = model.predict(scaled_input)[0]

    st.success(f"💰 Predicted Median House Value: **${prediction * 100000:.2f}**")
'''
